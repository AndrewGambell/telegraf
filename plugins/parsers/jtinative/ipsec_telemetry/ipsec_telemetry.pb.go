// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugins/parsers/jtinative/ipsec_telemetry/ipsec_telemetry.proto

package ipsec_telemetry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import telemetry_top "github.com/influxdata/telegraf/plugins/parsers/jtinative/telemetry_top"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IPsecVPN struct {
	IpsecGlobalInfo      []*IPsecGlobalInfo    `protobuf:"bytes,1,rep,name=ipsec_global_info,json=ipsecGlobalInfo" json:"ipsec_global_info,omitempty"`
	IpsecSvcsetInfo      []*IPsecPerSvcsetInfo `protobuf:"bytes,2,rep,name=ipsec_svcset_info,json=ipsecSvcsetInfo" json:"ipsec_svcset_info,omitempty"`
	IpsecTunnelInfo      []*IPsecPerTunnelInfo `protobuf:"bytes,3,rep,name=ipsec_tunnel_info,json=ipsecTunnelInfo" json:"ipsec_tunnel_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IPsecVPN) Reset()         { *m = IPsecVPN{} }
func (m *IPsecVPN) String() string { return proto.CompactTextString(m) }
func (*IPsecVPN) ProtoMessage()    {}
func (*IPsecVPN) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipsec_telemetry_088015a4f296307f, []int{0}
}
func (m *IPsecVPN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPsecVPN.Unmarshal(m, b)
}
func (m *IPsecVPN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPsecVPN.Marshal(b, m, deterministic)
}
func (dst *IPsecVPN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPsecVPN.Merge(dst, src)
}
func (m *IPsecVPN) XXX_Size() int {
	return xxx_messageInfo_IPsecVPN.Size(m)
}
func (m *IPsecVPN) XXX_DiscardUnknown() {
	xxx_messageInfo_IPsecVPN.DiscardUnknown(m)
}

var xxx_messageInfo_IPsecVPN proto.InternalMessageInfo

func (m *IPsecVPN) GetIpsecGlobalInfo() []*IPsecGlobalInfo {
	if m != nil {
		return m.IpsecGlobalInfo
	}
	return nil
}

func (m *IPsecVPN) GetIpsecSvcsetInfo() []*IPsecPerSvcsetInfo {
	if m != nil {
		return m.IpsecSvcsetInfo
	}
	return nil
}

func (m *IPsecVPN) GetIpsecTunnelInfo() []*IPsecPerTunnelInfo {
	if m != nil {
		return m.IpsecTunnelInfo
	}
	return nil
}

type IPsecGlobalInfo struct {
	// RE-Pconn Connect Retry
	RePconnConnect *uint64 `protobuf:"varint,1,opt,name=re_pconn_connect,json=rePconnConnect" json:"re_pconn_connect,omitempty"`
	// RE-Pconn Status
	PconnStatus *uint64 `protobuf:"varint,2,opt,name=pconn_status,json=pconnStatus" json:"pconn_status,omitempty"`
	// Request Enq Succ
	SaTriggerEnqSuccess *uint64 `protobuf:"varint,3,opt,name=sa_trigger_enq_success,json=saTriggerEnqSuccess" json:"sa_trigger_enq_success,omitempty"`
	// Request Enq Fail
	SaTriggerEnqFail *uint64 `protobuf:"varint,4,opt,name=sa_trigger_enq_fail,json=saTriggerEnqFail" json:"sa_trigger_enq_fail,omitempty"`
	// Retry Enq Succ
	SaTriggerRetrySuccess *uint64 `protobuf:"varint,5,opt,name=sa_trigger_retry_success,json=saTriggerRetrySuccess" json:"sa_trigger_retry_success,omitempty"`
	// Retry Enq Fail
	SaTriggerRetryFail *uint64 `protobuf:"varint,6,opt,name=sa_trigger_retry_fail,json=saTriggerRetryFail" json:"sa_trigger_retry_fail,omitempty"`
	// Trigger Send Succ
	SaTriggerSent *uint64 `protobuf:"varint,7,opt,name=sa_trigger_sent,json=saTriggerSent" json:"sa_trigger_sent,omitempty"`
	// Trigger Send Fail
	SaTriggerFail *uint64 `protobuf:"varint,8,opt,name=sa_trigger_fail,json=saTriggerFail" json:"sa_trigger_fail,omitempty"`
	// Trigger Alloc
	SaTriggerAlloc *uint64 `protobuf:"varint,9,opt,name=sa_trigger_alloc,json=saTriggerAlloc" json:"sa_trigger_alloc,omitempty"`
	// Alloc Fail
	SaTriggerAllocFail *uint64 `protobuf:"varint,10,opt,name=sa_trigger_alloc_fail,json=saTriggerAllocFail" json:"sa_trigger_alloc_fail,omitempty"`
	// Trigger Free
	SaTriggerFree *uint64 `protobuf:"varint,11,opt,name=sa_trigger_free,json=saTriggerFree" json:"sa_trigger_free,omitempty"`
	// Outstanding Trig Msg in Queue
	SaTrigEnqCount       *uint64  `protobuf:"varint,12,opt,name=sa_trig_enq_count,json=saTrigEnqCount" json:"sa_trig_enq_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPsecGlobalInfo) Reset()         { *m = IPsecGlobalInfo{} }
func (m *IPsecGlobalInfo) String() string { return proto.CompactTextString(m) }
func (*IPsecGlobalInfo) ProtoMessage()    {}
func (*IPsecGlobalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipsec_telemetry_088015a4f296307f, []int{1}
}
func (m *IPsecGlobalInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPsecGlobalInfo.Unmarshal(m, b)
}
func (m *IPsecGlobalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPsecGlobalInfo.Marshal(b, m, deterministic)
}
func (dst *IPsecGlobalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPsecGlobalInfo.Merge(dst, src)
}
func (m *IPsecGlobalInfo) XXX_Size() int {
	return xxx_messageInfo_IPsecGlobalInfo.Size(m)
}
func (m *IPsecGlobalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IPsecGlobalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IPsecGlobalInfo proto.InternalMessageInfo

func (m *IPsecGlobalInfo) GetRePconnConnect() uint64 {
	if m != nil && m.RePconnConnect != nil {
		return *m.RePconnConnect
	}
	return 0
}

func (m *IPsecGlobalInfo) GetPconnStatus() uint64 {
	if m != nil && m.PconnStatus != nil {
		return *m.PconnStatus
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerEnqSuccess() uint64 {
	if m != nil && m.SaTriggerEnqSuccess != nil {
		return *m.SaTriggerEnqSuccess
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerEnqFail() uint64 {
	if m != nil && m.SaTriggerEnqFail != nil {
		return *m.SaTriggerEnqFail
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerRetrySuccess() uint64 {
	if m != nil && m.SaTriggerRetrySuccess != nil {
		return *m.SaTriggerRetrySuccess
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerRetryFail() uint64 {
	if m != nil && m.SaTriggerRetryFail != nil {
		return *m.SaTriggerRetryFail
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerSent() uint64 {
	if m != nil && m.SaTriggerSent != nil {
		return *m.SaTriggerSent
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerFail() uint64 {
	if m != nil && m.SaTriggerFail != nil {
		return *m.SaTriggerFail
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerAlloc() uint64 {
	if m != nil && m.SaTriggerAlloc != nil {
		return *m.SaTriggerAlloc
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerAllocFail() uint64 {
	if m != nil && m.SaTriggerAllocFail != nil {
		return *m.SaTriggerAllocFail
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTriggerFree() uint64 {
	if m != nil && m.SaTriggerFree != nil {
		return *m.SaTriggerFree
	}
	return 0
}

func (m *IPsecGlobalInfo) GetSaTrigEnqCount() uint64 {
	if m != nil && m.SaTrigEnqCount != nil {
		return *m.SaTrigEnqCount
	}
	return 0
}

type IPsecPerSvcsetInfo struct {
	// Service Set ID
	SvcsetId *uint64 `protobuf:"varint,1,req,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	// Rule Lookup Fail
	RuleLookupFailed *uint64 `protobuf:"varint,2,opt,name=rule_lookup_failed,json=ruleLookupFailed" json:"rule_lookup_failed,omitempty"`
	// SA Lookup Fail
	SaLookupFailed *uint64 `protobuf:"varint,3,opt,name=sa_lookup_failed,json=saLookupFailed" json:"sa_lookup_failed,omitempty"`
	// Pre Frags
	ExceedsTunnelMtu *uint64 `protobuf:"varint,4,opt,name=exceeds_tunnel_mtu,json=exceedsTunnelMtu" json:"exceeds_tunnel_mtu,omitempty"`
	// Clear Pkts Recvd for encap
	ClearPktReceived *uint64 `protobuf:"varint,5,opt,name=clear_pkt_received,json=clearPktReceived" json:"clear_pkt_received,omitempty"`
	// ESP Pkts Recvd
	EspPktReceived *uint64 `protobuf:"varint,6,opt,name=esp_pkt_received,json=espPktReceived" json:"esp_pkt_received,omitempty"`
	// Encap Pkts From Crypto
	EncapCallback *uint64 `protobuf:"varint,7,opt,name=encap_callback,json=encapCallback" json:"encap_callback,omitempty"`
	// Decap Pkts From Crypto
	DecapCallback        *uint64  `protobuf:"varint,8,opt,name=decap_callback,json=decapCallback" json:"decap_callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPsecPerSvcsetInfo) Reset()         { *m = IPsecPerSvcsetInfo{} }
func (m *IPsecPerSvcsetInfo) String() string { return proto.CompactTextString(m) }
func (*IPsecPerSvcsetInfo) ProtoMessage()    {}
func (*IPsecPerSvcsetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipsec_telemetry_088015a4f296307f, []int{2}
}
func (m *IPsecPerSvcsetInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPsecPerSvcsetInfo.Unmarshal(m, b)
}
func (m *IPsecPerSvcsetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPsecPerSvcsetInfo.Marshal(b, m, deterministic)
}
func (dst *IPsecPerSvcsetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPsecPerSvcsetInfo.Merge(dst, src)
}
func (m *IPsecPerSvcsetInfo) XXX_Size() int {
	return xxx_messageInfo_IPsecPerSvcsetInfo.Size(m)
}
func (m *IPsecPerSvcsetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IPsecPerSvcsetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IPsecPerSvcsetInfo proto.InternalMessageInfo

func (m *IPsecPerSvcsetInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetRuleLookupFailed() uint64 {
	if m != nil && m.RuleLookupFailed != nil {
		return *m.RuleLookupFailed
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetSaLookupFailed() uint64 {
	if m != nil && m.SaLookupFailed != nil {
		return *m.SaLookupFailed
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetExceedsTunnelMtu() uint64 {
	if m != nil && m.ExceedsTunnelMtu != nil {
		return *m.ExceedsTunnelMtu
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetClearPktReceived() uint64 {
	if m != nil && m.ClearPktReceived != nil {
		return *m.ClearPktReceived
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetEspPktReceived() uint64 {
	if m != nil && m.EspPktReceived != nil {
		return *m.EspPktReceived
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetEncapCallback() uint64 {
	if m != nil && m.EncapCallback != nil {
		return *m.EncapCallback
	}
	return 0
}

func (m *IPsecPerSvcsetInfo) GetDecapCallback() uint64 {
	if m != nil && m.DecapCallback != nil {
		return *m.DecapCallback
	}
	return 0
}

type IPsecPerTunnelInfo struct {
	// Tunnel IDs on PIC
	TunnelId *uint64 `protobuf:"varint,1,req,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Seq Num Zero
	EspRplzero *uint64 `protobuf:"varint,2,opt,name=esp_rplzero,json=espRplzero" json:"esp_rplzero,omitempty"`
	// Bad Pad
	IpsecBadHeaders *uint64 `protobuf:"varint,3,opt,name=ipsec_bad_headers,json=ipsecBadHeaders" json:"ipsec_bad_headers,omitempty"`
	// ESP Tail Err
	EspBadTrailers *uint64 `protobuf:"varint,4,opt,name=esp_bad_trailers,json=espBadTrailers" json:"esp_bad_trailers,omitempty"`
	// Next Proto Err
	DecapNxtProtoErr *uint64 `protobuf:"varint,5,opt,name=decap_nxt_proto_err,json=decapNxtProtoErr" json:"decap_nxt_proto_err,omitempty"`
	// Inner Len Err
	DecapInnerLenErr *uint64 `protobuf:"varint,6,opt,name=decap_inner_len_err,json=decapInnerLenErr" json:"decap_inner_len_err,omitempty"`
	// Outer Hdr Err
	DecapHdrErr *uint64 `protobuf:"varint,7,opt,name=decap_hdr_err,json=decapHdrErr" json:"decap_hdr_err,omitempty"`
	// Inner Saddr Err
	DecapInnerSaddrErr *uint64 `protobuf:"varint,8,opt,name=decap_inner_saddr_err,json=decapInnerSaddrErr" json:"decap_inner_saddr_err,omitempty"`
	// Inner Daddr Err
	DecapInnerDaddrErr *uint64 `protobuf:"varint,9,opt,name=decap_inner_daddr_err,json=decapInnerDaddrErr" json:"decap_inner_daddr_err,omitempty"`
	// Sn Alloc Fail
	DecapSnAllocFail *uint64 `protobuf:"varint,10,opt,name=decap_sn_alloc_fail,json=decapSnAllocFail" json:"decap_sn_alloc_fail,omitempty"`
	// Sn Ext Fail
	DecapSnExtFail *uint64 `protobuf:"varint,11,opt,name=decap_sn_ext_fail,json=decapSnExtFail" json:"decap_sn_ext_fail,omitempty"`
	// Auth Fail
	EspAuthFailed *uint64 `protobuf:"varint,12,opt,name=esp_auth_failed,json=espAuthFailed" json:"esp_auth_failed,omitempty"`
	// Reinject Fail
	DecapReinjectFail *uint64 `protobuf:"varint,13,opt,name=decap_reinject_fail,json=decapReinjectFail" json:"decap_reinject_fail,omitempty"`
	// Session Transient Drop
	DecapSnTransientDrop *uint64 `protobuf:"varint,14,opt,name=decap_sn_transient_drop,json=decapSnTransientDrop" json:"decap_sn_transient_drop,omitempty"`
	// Replay Before Win
	EspRplbeforewindow *uint64 `protobuf:"varint,15,opt,name=esp_rplbeforewindow,json=espRplbeforewindow" json:"esp_rplbeforewindow,omitempty"`
	// Replayed Pkts
	EspRplduplicate *uint64 `protobuf:"varint,16,opt,name=esp_rplduplicate,json=espRplduplicate" json:"esp_rplduplicate,omitempty"`
	// Encrypted Bytes
	EspProtectedBytesSent *uint64 `protobuf:"varint,17,opt,name=esp_protected_bytes_sent,json=espProtectedBytesSent" json:"esp_protected_bytes_sent,omitempty"`
	// Decrypted Bytes
	EspProtectedBytesRecvd *uint64 `protobuf:"varint,18,opt,name=esp_protected_bytes_recvd,json=espProtectedBytesRecvd" json:"esp_protected_bytes_recvd,omitempty"`
	// Encrypted Packets
	Encrypts *uint64 `protobuf:"varint,19,opt,name=encrypts" json:"encrypts,omitempty"`
	// Decrypted Packets
	Decrypts             *uint64  `protobuf:"varint,20,opt,name=decrypts" json:"decrypts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPsecPerTunnelInfo) Reset()         { *m = IPsecPerTunnelInfo{} }
func (m *IPsecPerTunnelInfo) String() string { return proto.CompactTextString(m) }
func (*IPsecPerTunnelInfo) ProtoMessage()    {}
func (*IPsecPerTunnelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipsec_telemetry_088015a4f296307f, []int{3}
}
func (m *IPsecPerTunnelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPsecPerTunnelInfo.Unmarshal(m, b)
}
func (m *IPsecPerTunnelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPsecPerTunnelInfo.Marshal(b, m, deterministic)
}
func (dst *IPsecPerTunnelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPsecPerTunnelInfo.Merge(dst, src)
}
func (m *IPsecPerTunnelInfo) XXX_Size() int {
	return xxx_messageInfo_IPsecPerTunnelInfo.Size(m)
}
func (m *IPsecPerTunnelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IPsecPerTunnelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IPsecPerTunnelInfo proto.InternalMessageInfo

func (m *IPsecPerTunnelInfo) GetTunnelId() uint64 {
	if m != nil && m.TunnelId != nil {
		return *m.TunnelId
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspRplzero() uint64 {
	if m != nil && m.EspRplzero != nil {
		return *m.EspRplzero
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetIpsecBadHeaders() uint64 {
	if m != nil && m.IpsecBadHeaders != nil {
		return *m.IpsecBadHeaders
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspBadTrailers() uint64 {
	if m != nil && m.EspBadTrailers != nil {
		return *m.EspBadTrailers
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapNxtProtoErr() uint64 {
	if m != nil && m.DecapNxtProtoErr != nil {
		return *m.DecapNxtProtoErr
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapInnerLenErr() uint64 {
	if m != nil && m.DecapInnerLenErr != nil {
		return *m.DecapInnerLenErr
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapHdrErr() uint64 {
	if m != nil && m.DecapHdrErr != nil {
		return *m.DecapHdrErr
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapInnerSaddrErr() uint64 {
	if m != nil && m.DecapInnerSaddrErr != nil {
		return *m.DecapInnerSaddrErr
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapInnerDaddrErr() uint64 {
	if m != nil && m.DecapInnerDaddrErr != nil {
		return *m.DecapInnerDaddrErr
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapSnAllocFail() uint64 {
	if m != nil && m.DecapSnAllocFail != nil {
		return *m.DecapSnAllocFail
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapSnExtFail() uint64 {
	if m != nil && m.DecapSnExtFail != nil {
		return *m.DecapSnExtFail
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspAuthFailed() uint64 {
	if m != nil && m.EspAuthFailed != nil {
		return *m.EspAuthFailed
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapReinjectFail() uint64 {
	if m != nil && m.DecapReinjectFail != nil {
		return *m.DecapReinjectFail
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecapSnTransientDrop() uint64 {
	if m != nil && m.DecapSnTransientDrop != nil {
		return *m.DecapSnTransientDrop
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspRplbeforewindow() uint64 {
	if m != nil && m.EspRplbeforewindow != nil {
		return *m.EspRplbeforewindow
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspRplduplicate() uint64 {
	if m != nil && m.EspRplduplicate != nil {
		return *m.EspRplduplicate
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspProtectedBytesSent() uint64 {
	if m != nil && m.EspProtectedBytesSent != nil {
		return *m.EspProtectedBytesSent
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEspProtectedBytesRecvd() uint64 {
	if m != nil && m.EspProtectedBytesRecvd != nil {
		return *m.EspProtectedBytesRecvd
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetEncrypts() uint64 {
	if m != nil && m.Encrypts != nil {
		return *m.Encrypts
	}
	return 0
}

func (m *IPsecPerTunnelInfo) GetDecrypts() uint64 {
	if m != nil && m.Decrypts != nil {
		return *m.Decrypts
	}
	return 0
}

var E_JnprIPsecVPNExt = &proto.ExtensionDesc{
	ExtendedType:  (*telemetry_top.JuniperNetworksSensors)(nil),
	ExtensionType: (*IPsecVPN)(nil),
	Field:         77,
	Name:          "jnprIPsecVPNExt",
	Tag:           "bytes,77,opt,name=jnprIPsecVPNExt",
	Filename:      "plugins/parsers/jtinative/ipsec_telemetry/ipsec_telemetry.proto",
}

func init() {
	proto.RegisterType((*IPsecVPN)(nil), "IPsecVPN")
	proto.RegisterType((*IPsecGlobalInfo)(nil), "IPsecGlobalInfo")
	proto.RegisterType((*IPsecPerSvcsetInfo)(nil), "IPsecPerSvcsetInfo")
	proto.RegisterType((*IPsecPerTunnelInfo)(nil), "IPsecPerTunnelInfo")
	proto.RegisterExtension(E_JnprIPsecVPNExt)
}

func init() {
	proto.RegisterFile("plugins/parsers/jtinative/ipsec_telemetry/ipsec_telemetry.proto", fileDescriptor_ipsec_telemetry_088015a4f296307f)
}

var fileDescriptor_ipsec_telemetry_088015a4f296307f = []byte{
	// 955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0xd1, 0x4e, 0x1c, 0x37,
	0x14, 0x86, 0xb5, 0x40, 0x13, 0xf0, 0x26, 0xb0, 0x78, 0x43, 0x32, 0x4d, 0x2f, 0x4a, 0x91, 0x5a,
	0x2d, 0x55, 0x0a, 0x4a, 0xaa, 0xaa, 0x6a, 0x55, 0x29, 0x0a, 0x84, 0x34, 0x54, 0x04, 0xad, 0x76,
	0x51, 0x6f, 0x47, 0x66, 0x7c, 0x16, 0x86, 0x9d, 0x78, 0xcc, 0xb1, 0x07, 0x96, 0xde, 0xf5, 0x85,
	0xfa, 0x20, 0x7d, 0x87, 0xbe, 0x4b, 0xe5, 0x63, 0x7b, 0x76, 0x76, 0xe0, 0x26, 0xd2, 0xfe, 0xff,
	0xf7, 0x1f, 0x9f, 0x39, 0x39, 0x36, 0xec, 0xad, 0x2e, 0xaa, 0x8b, 0x5c, 0x99, 0x7d, 0x2d, 0xd0,
	0x00, 0x9a, 0xfd, 0x2b, 0x9b, 0x2b, 0x61, 0xf3, 0x1b, 0xd8, 0xcf, 0xb5, 0x81, 0x2c, 0xb5, 0x50,
	0xc0, 0x67, 0xb0, 0x78, 0xd7, 0xfe, 0xbd, 0xa7, 0xb1, 0xb4, 0xe5, 0xcb, 0x7e, 0x2d, 0xa4, 0xb6,
	0xd4, 0x5e, 0xdc, 0xf9, 0xb7, 0xc3, 0x56, 0x8f, 0x87, 0x06, 0xb2, 0x3f, 0x87, 0xa7, 0xfc, 0x37,
	0xb6, 0xe9, 0xa3, 0x17, 0x45, 0x79, 0x2e, 0x8a, 0x34, 0x57, 0x93, 0x32, 0xe9, 0x6c, 0x2f, 0x0f,
	0xba, 0x6f, 0x7a, 0x7b, 0x44, 0xfd, 0x4e, 0xc6, 0xb1, 0x9a, 0x94, 0xa3, 0x0d, 0x42, 0xe7, 0x02,
	0x7f, 0x1b, 0xd3, 0xe6, 0x26, 0x33, 0x60, 0x7d, 0x7a, 0x89, 0xd2, 0x7d, 0x9f, 0x1e, 0x02, 0x8e,
	0xc9, 0x6b, 0x14, 0x98, 0x0b, 0xf3, 0x02, 0xb6, 0x52, 0x0a, 0xc2, 0xf1, 0xcb, 0xad, 0x02, 0x67,
	0xe4, 0x35, 0x0a, 0xcc, 0x85, 0x9d, 0x7f, 0x56, 0xd8, 0x46, 0xab, 0x4d, 0x3e, 0x60, 0x3d, 0x84,
	0x54, 0x67, 0xa5, 0x52, 0xa9, 0xfb, 0x07, 0x32, 0x9b, 0x74, 0xb6, 0x3b, 0x83, 0x95, 0xd1, 0x3a,
	0xc2, 0xd0, 0x29, 0x87, 0x5e, 0xe5, 0xdf, 0xb0, 0x27, 0x1e, 0x33, 0x56, 0xd8, 0xca, 0x24, 0x4b,
	0x44, 0x75, 0x49, 0x1b, 0x93, 0xc4, 0x7f, 0x64, 0xcf, 0x8d, 0x48, 0x2d, 0xe6, 0x17, 0x17, 0x80,
	0x29, 0xa8, 0xeb, 0xd4, 0x54, 0x59, 0x06, 0xc6, 0x24, 0xcb, 0x04, 0xf7, 0x8d, 0x38, 0xf3, 0xe6,
	0x91, 0xba, 0x1e, 0x7b, 0x8b, 0xff, 0xc0, 0xfa, 0xad, 0xd0, 0x44, 0xe4, 0x45, 0xb2, 0x42, 0x89,
	0x5e, 0x33, 0xf1, 0x41, 0xe4, 0x05, 0xff, 0x99, 0x25, 0x0d, 0x1c, 0xe9, 0xff, 0x2b, 0x9e, 0xf2,
	0x05, 0x65, 0xb6, 0xea, 0xcc, 0xc8, 0xb9, 0xf1, 0x9c, 0xd7, 0x6c, 0xeb, 0x5e, 0x90, 0x4e, 0x7a,
	0x44, 0x29, 0xbe, 0x98, 0xa2, 0xb3, 0xbe, 0x63, 0x1b, 0x8d, 0x88, 0x01, 0x65, 0x93, 0xc7, 0x04,
	0x3f, 0xad, 0xe1, 0x31, 0x28, 0xdb, 0xe2, 0xa8, 0xe8, 0x6a, 0x8b, 0xa3, 0x7a, 0x03, 0xd6, 0x6b,
	0x70, 0xa2, 0x28, 0xca, 0x2c, 0x59, 0xf3, 0xc3, 0xae, 0xc1, 0x77, 0x4e, 0x6d, 0x35, 0x4b, 0xa4,
	0xaf, 0xcb, 0x5a, 0xcd, 0x12, 0xfe, 0x40, 0xb3, 0x13, 0x04, 0x48, 0xba, 0xed, 0x26, 0x10, 0x80,
	0xef, 0xb2, 0xcd, 0xc0, 0xd1, 0xb0, 0xb3, 0xb2, 0x52, 0x36, 0x79, 0xd2, 0xec, 0xe2, 0x48, 0x5d,
	0x1f, 0x3a, 0x75, 0xe7, 0xbf, 0x25, 0xc6, 0xef, 0x6f, 0x26, 0xff, 0x8a, 0xad, 0xc5, 0x1d, 0x96,
	0x49, 0x67, 0x7b, 0x69, 0xb0, 0x32, 0x5a, 0xf5, 0xc2, 0xb1, 0xe4, 0xaf, 0x18, 0xc7, 0xaa, 0x80,
	0xb4, 0x28, 0xcb, 0x69, 0xa5, 0xa9, 0x69, 0x90, 0x61, 0x59, 0x7a, 0xce, 0x39, 0x21, 0xe3, 0x03,
	0xe9, 0x61, 0x22, 0x8b, 0xec, 0x72, 0xec, 0x65, 0x81, 0x7c, 0xc5, 0x38, 0xcc, 0x32, 0x00, 0x69,
	0xe2, 0xfe, 0x7f, 0xb6, 0x55, 0xdc, 0x92, 0xe0, 0xf8, 0x5d, 0xff, 0x64, 0x2b, 0x47, 0x67, 0x05,
	0x08, 0x4c, 0xf5, 0xd4, 0xa6, 0x08, 0x19, 0xe4, 0x37, 0x20, 0xc3, 0x7e, 0xf4, 0xc8, 0x19, 0x4e,
	0xed, 0x28, 0xe8, 0xae, 0x0b, 0x30, 0x7a, 0x91, 0xf5, 0x5b, 0xb1, 0x0e, 0x46, 0x37, 0xc9, 0x6f,
	0xd9, 0x3a, 0xa8, 0x4c, 0xe8, 0x34, 0x13, 0x45, 0x71, 0x2e, 0xb2, 0x69, 0x5c, 0x08, 0x52, 0x0f,
	0x83, 0xe8, 0x30, 0x09, 0x0b, 0x58, 0xd8, 0x07, 0x52, 0x23, 0xb6, 0xf3, 0xf7, 0xe3, 0xf9, 0x7c,
	0xe7, 0xf7, 0xd4, 0xcd, 0x37, 0x5e, 0xf1, 0x7a, 0xbe, 0x5e, 0x38, 0x96, 0xfc, 0x6b, 0xd6, 0x75,
	0xbd, 0xa2, 0x2e, 0xfe, 0x02, 0x2c, 0xc3, 0x60, 0x19, 0x18, 0x3d, 0xf2, 0x0a, 0xff, 0x3e, 0x3e,
	0x13, 0xe7, 0x42, 0xa6, 0x97, 0x20, 0x24, 0x60, 0xbc, 0x7f, 0xfe, 0x45, 0x38, 0x10, 0xf2, 0xa3,
	0x97, 0xe3, 0x87, 0x3b, 0xd2, 0xa2, 0x9b, 0x33, 0x9a, 0x30, 0x52, 0xf7, 0xe1, 0x07, 0x42, 0x9e,
	0x05, 0xd5, 0xdd, 0x52, 0xff, 0x45, 0x6a, 0x66, 0x53, 0x7a, 0x1b, 0x53, 0x40, 0x8c, 0x13, 0x25,
	0xeb, 0x74, 0x66, 0x87, 0xce, 0x38, 0x42, 0x9c, 0xe3, 0xb9, 0x52, 0x80, 0x69, 0x01, 0x8a, 0xf0,
	0x47, 0x0d, 0xfc, 0xd8, 0x39, 0x27, 0xa0, 0x1c, 0xbe, 0xc3, 0xfc, 0x64, 0xd2, 0x4b, 0x89, 0x04,
	0xfa, 0xa9, 0x76, 0x49, 0xfc, 0x28, 0xd1, 0x31, 0xaf, 0xd9, 0x56, 0xb3, 0xa4, 0x11, 0x32, 0xb0,
	0x7e, 0xb4, 0x7c, 0x5e, 0x74, 0xec, 0xac, 0x07, 0x22, 0xb2, 0x8e, 0xac, 0xb5, 0x23, 0xef, 0x63,
	0xa4, 0x6e, 0xdc, 0xa8, 0xfb, 0xd7, 0xce, 0x37, 0x3e, 0x56, 0xf3, 0x4b, 0xb7, 0xcb, 0x36, 0x6b,
	0x1c, 0x66, 0xd6, 0xc3, 0xfe, 0xda, 0xad, 0x07, 0xf8, 0x68, 0x66, 0xe3, 0xfd, 0x74, 0xb3, 0x16,
	0x95, 0xbd, 0x8c, 0x9b, 0xfe, 0x24, 0xec, 0x8e, 0xd1, 0xef, 0x2a, 0x7b, 0x19, 0x16, 0x7d, 0x2f,
	0x76, 0x80, 0x90, 0xab, 0x2b, 0xc8, 0x42, 0xd1, 0xa7, 0xc4, 0xfa, 0xd3, 0x46, 0xc1, 0xa1, 0xba,
	0x3f, 0xb1, 0x17, 0x75, 0x0b, 0x16, 0x85, 0x32, 0x39, 0x28, 0x9b, 0x4a, 0x2c, 0x75, 0xb2, 0x4e,
	0x99, 0x67, 0xa1, 0x91, 0xb3, 0x68, 0xbe, 0xc7, 0x52, 0xf3, 0x7d, 0xd6, 0x0f, 0x7b, 0x74, 0x0e,
	0x93, 0x12, 0xe1, 0x36, 0x57, 0xb2, 0xbc, 0x4d, 0x36, 0xfc, 0x64, 0xfc, 0x3e, 0x35, 0x1d, 0xbe,
	0xeb, 0x77, 0x05, 0x75, 0x21, 0x2b, 0x5d, 0xe4, 0x99, 0xb0, 0x90, 0xf4, 0xfc, 0x5a, 0x79, 0xba,
	0x96, 0xdd, 0x1b, 0x4d, 0xf7, 0x09, 0x4b, 0x0b, 0x99, 0x05, 0x99, 0x9e, 0xdf, 0x59, 0x30, 0xfe,
	0x01, 0xdd, 0xf4, 0x6f, 0xb4, 0xbb, 0x57, 0xd1, 0x3e, 0x70, 0x2e, 0x3d, 0xa4, 0xbf, 0xb0, 0x2f,
	0x1f, 0x0a, 0x22, 0x64, 0x37, 0x32, 0xe1, 0x94, 0x7c, 0x7e, 0x2f, 0x39, 0x72, 0x2e, 0x7f, 0xc9,
	0x56, 0x41, 0x65, 0x78, 0xa7, 0xad, 0x49, 0xfa, 0x44, 0xd6, 0xbf, 0x9d, 0x27, 0x21, 0x78, 0xcf,
	0xbc, 0x17, 0x7f, 0xff, 0x7a, 0xc2, 0x36, 0xae, 0x94, 0xc6, 0xf8, 0x47, 0xfe, 0x68, 0x66, 0xf9,
	0x8b, 0xbd, 0x3f, 0x2a, 0x95, 0x6b, 0xc0, 0x53, 0xb0, 0xb7, 0x25, 0x4e, 0x5d, 0x6f, 0xa6, 0x44,
	0x93, 0x7c, 0xda, 0xee, 0x0c, 0xba, 0x6f, 0xd6, 0xf6, 0x22, 0x3c, 0x6a, 0x47, 0xff, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0x2c, 0xc5, 0x0d, 0x9e, 0x86, 0x08, 0x00, 0x00,
}
