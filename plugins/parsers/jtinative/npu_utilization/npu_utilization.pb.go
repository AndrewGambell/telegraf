// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugins/parsers/jtinative/npu_utilization/npu_utilization.proto

package npu_utilization

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import telemetry_top "github.com/influxdata/telegraf/plugins/parsers/jtinative/telemetry_top"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Top level message
type NetworkProcessorUtilization struct {
	NpuUtilStats         []*Utilization `protobuf:"bytes,1,rep,name=npu_util_stats,json=npuUtilStats" json:"npu_util_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NetworkProcessorUtilization) Reset()         { *m = NetworkProcessorUtilization{} }
func (m *NetworkProcessorUtilization) String() string { return proto.CompactTextString(m) }
func (*NetworkProcessorUtilization) ProtoMessage()    {}
func (*NetworkProcessorUtilization) Descriptor() ([]byte, []int) {
	return fileDescriptor_npu_utilization_218e55bb79d879ba, []int{0}
}
func (m *NetworkProcessorUtilization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkProcessorUtilization.Unmarshal(m, b)
}
func (m *NetworkProcessorUtilization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkProcessorUtilization.Marshal(b, m, deterministic)
}
func (dst *NetworkProcessorUtilization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProcessorUtilization.Merge(dst, src)
}
func (m *NetworkProcessorUtilization) XXX_Size() int {
	return xxx_messageInfo_NetworkProcessorUtilization.Size(m)
}
func (m *NetworkProcessorUtilization) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProcessorUtilization.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProcessorUtilization proto.InternalMessageInfo

func (m *NetworkProcessorUtilization) GetNpuUtilStats() []*Utilization {
	if m != nil {
		return m.NpuUtilStats
	}
	return nil
}

// Utilization per Network Processor
type Utilization struct {
	// Globally unique identifier for an NPU. This is of the form
	// FPCX:NPUY, where X is the slot number of the linecard and Y
	// is the index of the NPU on the linecard
	Identifier *string `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	// A number on a scale of 0-100 that indicates the busyness of
	// an NPU. This is an approximation as the utilization depends
	// on the busyness of several internal components of the NPU
	Utilization *uint32 `protobuf:"varint,2,opt,name=utilization" json:"utilization,omitempty"`
	// Offered Packet load on the NPU.
	Packets []*PacketLoad `protobuf:"bytes,3,rep,name=packets" json:"packets,omitempty"`
	// Utilization of various internal memories of the NPU.
	Memory               []*MemoryLoad `protobuf:"bytes,4,rep,name=memory" json:"memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Utilization) Reset()         { *m = Utilization{} }
func (m *Utilization) String() string { return proto.CompactTextString(m) }
func (*Utilization) ProtoMessage()    {}
func (*Utilization) Descriptor() ([]byte, []int) {
	return fileDescriptor_npu_utilization_218e55bb79d879ba, []int{1}
}
func (m *Utilization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Utilization.Unmarshal(m, b)
}
func (m *Utilization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Utilization.Marshal(b, m, deterministic)
}
func (dst *Utilization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Utilization.Merge(dst, src)
}
func (m *Utilization) XXX_Size() int {
	return xxx_messageInfo_Utilization.Size(m)
}
func (m *Utilization) XXX_DiscardUnknown() {
	xxx_messageInfo_Utilization.DiscardUnknown(m)
}

var xxx_messageInfo_Utilization proto.InternalMessageInfo

func (m *Utilization) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *Utilization) GetUtilization() uint32 {
	if m != nil && m.Utilization != nil {
		return *m.Utilization
	}
	return 0
}

func (m *Utilization) GetPackets() []*PacketLoad {
	if m != nil {
		return m.Packets
	}
	return nil
}

func (m *Utilization) GetMemory() []*MemoryLoad {
	if m != nil {
		return m.Memory
	}
	return nil
}

// Load on a memory subsystem of the NPU
type MemoryLoad struct {
	// A name string to identify the particular memory subsystem
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Various memory utilization metrics
	AverageUtil *uint32 `protobuf:"varint,2,opt,name=average_util,json=averageUtil" json:"average_util,omitempty"`
	HighestUtil *uint32 `protobuf:"varint,3,opt,name=highest_util,json=highestUtil" json:"highest_util,omitempty"`
	LowestUtil  *uint32 `protobuf:"varint,4,opt,name=lowest_util,json=lowestUtil" json:"lowest_util,omitempty"`
	// Each memory is front ended by a cache. The following metrics
	// indicate how these caches are working
	AverageCacheHitRate  *uint32  `protobuf:"varint,5,opt,name=average_cache_hit_rate,json=averageCacheHitRate" json:"average_cache_hit_rate,omitempty"`
	HighestCacheHitRate  *uint32  `protobuf:"varint,6,opt,name=highest_cache_hit_rate,json=highestCacheHitRate" json:"highest_cache_hit_rate,omitempty"`
	LowestCacheHitRate   *uint32  `protobuf:"varint,7,opt,name=lowest_cache_hit_rate,json=lowestCacheHitRate" json:"lowest_cache_hit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryLoad) Reset()         { *m = MemoryLoad{} }
func (m *MemoryLoad) String() string { return proto.CompactTextString(m) }
func (*MemoryLoad) ProtoMessage()    {}
func (*MemoryLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_npu_utilization_218e55bb79d879ba, []int{2}
}
func (m *MemoryLoad) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryLoad.Unmarshal(m, b)
}
func (m *MemoryLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryLoad.Marshal(b, m, deterministic)
}
func (dst *MemoryLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryLoad.Merge(dst, src)
}
func (m *MemoryLoad) XXX_Size() int {
	return xxx_messageInfo_MemoryLoad.Size(m)
}
func (m *MemoryLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryLoad.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryLoad proto.InternalMessageInfo

func (m *MemoryLoad) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MemoryLoad) GetAverageUtil() uint32 {
	if m != nil && m.AverageUtil != nil {
		return *m.AverageUtil
	}
	return 0
}

func (m *MemoryLoad) GetHighestUtil() uint32 {
	if m != nil && m.HighestUtil != nil {
		return *m.HighestUtil
	}
	return 0
}

func (m *MemoryLoad) GetLowestUtil() uint32 {
	if m != nil && m.LowestUtil != nil {
		return *m.LowestUtil
	}
	return 0
}

func (m *MemoryLoad) GetAverageCacheHitRate() uint32 {
	if m != nil && m.AverageCacheHitRate != nil {
		return *m.AverageCacheHitRate
	}
	return 0
}

func (m *MemoryLoad) GetHighestCacheHitRate() uint32 {
	if m != nil && m.HighestCacheHitRate != nil {
		return *m.HighestCacheHitRate
	}
	return 0
}

func (m *MemoryLoad) GetLowestCacheHitRate() uint32 {
	if m != nil && m.LowestCacheHitRate != nil {
		return *m.LowestCacheHitRate
	}
	return 0
}

// Offered packet load on an internal subsystem of the NPU
type PacketLoad struct {
	// Each internal subsystem of the NPU has a name
	Identifier *string `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	// Rate of packets received
	Rate *uint64 `protobuf:"varint,2,opt,name=rate" json:"rate,omitempty"`
	// The following metrics indicate the compute load on the NPU
	AverageInstructionsPerPacket *uint32  `protobuf:"varint,3,opt,name=average_instructions_per_packet,json=averageInstructionsPerPacket" json:"average_instructions_per_packet,omitempty"`
	AverageWaitCyclesPerPacket   *uint32  `protobuf:"varint,4,opt,name=average_wait_cycles_per_packet,json=averageWaitCyclesPerPacket" json:"average_wait_cycles_per_packet,omitempty"`
	AverageCyclesPerPacket       *uint32  `protobuf:"varint,5,opt,name=average_cycles_per_packet,json=averageCyclesPerPacket" json:"average_cycles_per_packet,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *PacketLoad) Reset()         { *m = PacketLoad{} }
func (m *PacketLoad) String() string { return proto.CompactTextString(m) }
func (*PacketLoad) ProtoMessage()    {}
func (*PacketLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_npu_utilization_218e55bb79d879ba, []int{3}
}
func (m *PacketLoad) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketLoad.Unmarshal(m, b)
}
func (m *PacketLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketLoad.Marshal(b, m, deterministic)
}
func (dst *PacketLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketLoad.Merge(dst, src)
}
func (m *PacketLoad) XXX_Size() int {
	return xxx_messageInfo_PacketLoad.Size(m)
}
func (m *PacketLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketLoad.DiscardUnknown(m)
}

var xxx_messageInfo_PacketLoad proto.InternalMessageInfo

func (m *PacketLoad) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *PacketLoad) GetRate() uint64 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *PacketLoad) GetAverageInstructionsPerPacket() uint32 {
	if m != nil && m.AverageInstructionsPerPacket != nil {
		return *m.AverageInstructionsPerPacket
	}
	return 0
}

func (m *PacketLoad) GetAverageWaitCyclesPerPacket() uint32 {
	if m != nil && m.AverageWaitCyclesPerPacket != nil {
		return *m.AverageWaitCyclesPerPacket
	}
	return 0
}

func (m *PacketLoad) GetAverageCyclesPerPacket() uint32 {
	if m != nil && m.AverageCyclesPerPacket != nil {
		return *m.AverageCyclesPerPacket
	}
	return 0
}

var E_JnprNpuUtilizationExt = &proto.ExtensionDesc{
	ExtendedType:  (*telemetry_top.JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkProcessorUtilization)(nil),
	Field:         12,
	Name:          "jnpr_npu_utilization_ext",
	Tag:           "bytes,12,opt,name=jnpr_npu_utilization_ext,json=jnprNpuUtilizationExt",
	Filename:      "plugins/parsers/jtinative/npu_utilization/npu_utilization.proto",
}

func init() {
	proto.RegisterType((*NetworkProcessorUtilization)(nil), "NetworkProcessorUtilization")
	proto.RegisterType((*Utilization)(nil), "Utilization")
	proto.RegisterType((*MemoryLoad)(nil), "MemoryLoad")
	proto.RegisterType((*PacketLoad)(nil), "PacketLoad")
	proto.RegisterExtension(E_JnprNpuUtilizationExt)
}

func init() {
	proto.RegisterFile("plugins/parsers/jtinative/npu_utilization/npu_utilization.proto", fileDescriptor_npu_utilization_218e55bb79d879ba)
}

var fileDescriptor_npu_utilization_218e55bb79d879ba = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0x13, 0x3d,
	0x10, 0xc7, 0xb5, 0x49, 0xbe, 0x56, 0x9d, 0xcd, 0xc7, 0xc1, 0x55, 0x61, 0x29, 0x55, 0xbb, 0x04,
	0x21, 0xe5, 0x94, 0x88, 0x70, 0x82, 0x0b, 0x12, 0x55, 0x25, 0x40, 0x50, 0x85, 0xad, 0x10, 0x47,
	0xcb, 0xda, 0x0e, 0x89, 0xdb, 0xc4, 0xb6, 0xec, 0xd9, 0xa6, 0xe1, 0x01, 0x78, 0x09, 0xae, 0x3c,
	0x28, 0x5a, 0xdb, 0xdb, 0x6c, 0x83, 0x04, 0x37, 0xfb, 0x3f, 0xbf, 0xff, 0x8c, 0x3d, 0xa3, 0x81,
	0x37, 0x66, 0x51, 0xcd, 0xa4, 0x72, 0x63, 0x23, 0xac, 0x43, 0xeb, 0xc6, 0x57, 0x24, 0x95, 0x20,
	0x79, 0x83, 0x63, 0x65, 0x2a, 0x5e, 0x91, 0x5c, 0xc8, 0xef, 0x82, 0xa4, 0x56, 0xdb, 0xf7, 0x91,
	0xb1, 0x9a, 0xf4, 0xe1, 0x3e, 0xe1, 0x02, 0x97, 0x48, 0x76, 0xcd, 0x49, 0x9b, 0x20, 0x0e, 0x3e,
	0xc3, 0x93, 0x73, 0xa4, 0x95, 0xb6, 0xd7, 0x53, 0xab, 0x4b, 0x74, 0x4e, 0xdb, 0x2f, 0x1b, 0x27,
	0x9b, 0xc0, 0x83, 0x26, 0x19, 0x77, 0x24, 0xc8, 0x65, 0x49, 0xde, 0x1d, 0xa6, 0x93, 0xfe, 0xa8,
	0x45, 0x15, 0x7d, 0x65, 0xaa, 0xfa, 0x7e, 0x51, 0x13, 0x83, 0x9f, 0x09, 0xa4, 0xed, 0x1c, 0xc7,
	0x00, 0xf2, 0x12, 0x15, 0xc9, 0x6f, 0x12, 0x6d, 0x96, 0xe4, 0x9d, 0xe1, 0x5e, 0xd1, 0x52, 0x58,
	0x0e, 0x69, 0xeb, 0xb1, 0x59, 0x27, 0x4f, 0x86, 0xff, 0x17, 0x6d, 0x89, 0x3d, 0x87, 0x5d, 0x23,
	0xca, 0x6b, 0x24, 0x97, 0x75, 0x7d, 0xf9, 0x74, 0x34, 0xf5, 0xf7, 0x8f, 0x5a, 0x5c, 0x16, 0x4d,
	0x8c, 0x3d, 0x83, 0x9d, 0x25, 0x2e, 0xb5, 0x5d, 0x67, 0xbd, 0x48, 0x7d, 0xf2, 0x57, 0x4f, 0xc5,
	0xd0, 0xe0, 0x57, 0x07, 0x60, 0x23, 0x33, 0x06, 0x3d, 0x25, 0x96, 0x98, 0x25, 0x79, 0x32, 0xdc,
	0x2b, 0xfc, 0x99, 0x3d, 0x85, 0xbe, 0xb8, 0x41, 0x2b, 0x66, 0xe8, 0x3f, 0xde, 0xbc, 0x28, 0x6a,
	0xf5, 0xd7, 0x6a, 0x64, 0x2e, 0x67, 0x73, 0x74, 0x14, 0x90, 0x6e, 0x40, 0xa2, 0xe6, 0x91, 0x13,
	0x48, 0x17, 0x7a, 0x75, 0x47, 0xf4, 0x3c, 0x01, 0x41, 0xf2, 0xc0, 0x4b, 0x78, 0xd8, 0x94, 0x29,
	0x45, 0x39, 0x47, 0x3e, 0x97, 0xc4, 0xad, 0x20, 0xcc, 0xfe, 0xf3, 0xec, 0x7e, 0x8c, 0x9e, 0xd6,
	0xc1, 0x77, 0x92, 0x0a, 0x41, 0x58, 0x9b, 0x9a, 0xc2, 0x5b, 0xa6, 0x9d, 0x60, 0x8a, 0xd1, 0x7b,
	0xa6, 0x17, 0x70, 0x10, 0x9f, 0xb2, 0xe5, 0xd9, 0xf5, 0x1e, 0x16, 0x82, 0x6d, 0xcb, 0xe0, 0x47,
	0x07, 0x60, 0xd3, 0xe3, 0x7f, 0xce, 0x90, 0x41, 0xcf, 0x27, 0xac, 0x5b, 0xd5, 0x2b, 0xfc, 0x99,
	0x9d, 0xc1, 0x49, 0xf3, 0x3f, 0xa9, 0x1c, 0xd9, 0xaa, 0xac, 0x87, 0xe9, 0xb8, 0x41, 0xcb, 0xc3,
	0xc8, 0x62, 0xdb, 0x8e, 0x22, 0xf6, 0xbe, 0x45, 0x4d, 0xd1, 0x86, 0xf2, 0xec, 0x2d, 0x1c, 0x37,
	0x69, 0x56, 0x42, 0x12, 0x2f, 0xd7, 0xe5, 0x02, 0xef, 0x65, 0x09, 0xad, 0x3d, 0x8c, 0xd4, 0x57,
	0x21, 0xe9, 0xd4, 0x33, 0x9b, 0x1c, 0xaf, 0xe0, 0xf1, 0x5d, 0xab, 0xff, 0xb0, 0x87, 0x6e, 0x37,
	0xb3, 0xd8, 0xb2, 0xbe, 0x56, 0x90, 0x5d, 0x29, 0x63, 0xf9, 0xd6, 0x4e, 0x71, 0xbc, 0x25, 0xf6,
	0x68, 0xf4, 0xa1, 0x52, 0xd2, 0xa0, 0x8d, 0x2b, 0xe4, 0x2e, 0x50, 0x39, 0x6d, 0x5d, 0xd6, 0xcf,
	0x93, 0x61, 0x3a, 0x39, 0x1a, 0xfd, 0x65, 0xb5, 0x8a, 0x83, 0x3a, 0xed, 0x79, 0x58, 0x9c, 0xa8,
	0x9d, 0xdd, 0xd2, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x28, 0xf2, 0x67, 0xe7, 0x03, 0x00,
	0x00,
}
