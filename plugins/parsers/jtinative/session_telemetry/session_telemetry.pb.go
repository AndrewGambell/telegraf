// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugins/parsers/jtinative/session_telemetry/session_telemetry.proto

package session_telemetry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import telemetry_top "github.com/influxdata/telegraf/plugins/parsers/jtinative/telemetry_top"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServicesSession struct {
	SvcsSessionInfo      []*SessionInfo `protobuf:"bytes,1,rep,name=svcs_session_info,json=svcsSessionInfo" json:"svcs_session_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServicesSession) Reset()         { *m = ServicesSession{} }
func (m *ServicesSession) String() string { return proto.CompactTextString(m) }
func (*ServicesSession) ProtoMessage()    {}
func (*ServicesSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_telemetry_b56d271b9894e7d4, []int{0}
}
func (m *ServicesSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesSession.Unmarshal(m, b)
}
func (m *ServicesSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesSession.Marshal(b, m, deterministic)
}
func (dst *ServicesSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesSession.Merge(dst, src)
}
func (m *ServicesSession) XXX_Size() int {
	return xxx_messageInfo_ServicesSession.Size(m)
}
func (m *ServicesSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesSession.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesSession proto.InternalMessageInfo

func (m *ServicesSession) GetSvcsSessionInfo() []*SessionInfo {
	if m != nil {
		return m.SvcsSessionInfo
	}
	return nil
}

type SessionInfo struct {
	SnFlowInfo           []*FlowInfo `protobuf:"bytes,1,rep,name=sn_flow_info,json=snFlowInfo" json:"sn_flow_info,omitempty"`
	SnSvcSetName         *string     `protobuf:"bytes,2,opt,name=sn_svc_set_name,json=snSvcSetName" json:"sn_svc_set_name,omitempty"`
	SnSvcSetId           *uint64     `protobuf:"varint,3,opt,name=sn_svc_set_id,json=snSvcSetId" json:"sn_svc_set_id,omitempty"`
	SnId                 *uint64     `protobuf:"varint,4,opt,name=sn_id,json=snId" json:"sn_id,omitempty"`
	SnFlags              *uint64     `protobuf:"varint,5,opt,name=sn_flags,json=snFlags" json:"sn_flags,omitempty"`
	SnAlgId              *uint64     `protobuf:"varint,6,opt,name=sn_alg_id,json=snAlgId" json:"sn_alg_id,omitempty"`
	SnRoutingPathType    *uint64     `protobuf:"varint,7,opt,name=sn_routing_path_type,json=snRoutingPathType" json:"sn_routing_path_type,omitempty"`
	SnSessionTimeout     *uint64     `protobuf:"varint,8,opt,name=sn_session_timeout,json=snSessionTimeout" json:"sn_session_timeout,omitempty"`
	SnState              *uint64     `protobuf:"varint,9,opt,name=sn_state,json=snState" json:"sn_state,omitempty"`
	SnSwSessionId        *uint64     `protobuf:"varint,10,opt,name=sn_sw_session_id,json=snSwSessionId" json:"sn_sw_session_id,omitempty"`
	SnSvcId              *uint64     `protobuf:"varint,11,opt,name=sn_svc_id,json=snSvcId" json:"sn_svc_id,omitempty"`
	SnOffload            *bool       `protobuf:"varint,12,opt,name=sn_offload,json=snOffload" json:"sn_offload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SessionInfo) Reset()         { *m = SessionInfo{} }
func (m *SessionInfo) String() string { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()    {}
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_telemetry_b56d271b9894e7d4, []int{1}
}
func (m *SessionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionInfo.Unmarshal(m, b)
}
func (m *SessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionInfo.Marshal(b, m, deterministic)
}
func (dst *SessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInfo.Merge(dst, src)
}
func (m *SessionInfo) XXX_Size() int {
	return xxx_messageInfo_SessionInfo.Size(m)
}
func (m *SessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInfo proto.InternalMessageInfo

func (m *SessionInfo) GetSnFlowInfo() []*FlowInfo {
	if m != nil {
		return m.SnFlowInfo
	}
	return nil
}

func (m *SessionInfo) GetSnSvcSetName() string {
	if m != nil && m.SnSvcSetName != nil {
		return *m.SnSvcSetName
	}
	return ""
}

func (m *SessionInfo) GetSnSvcSetId() uint64 {
	if m != nil && m.SnSvcSetId != nil {
		return *m.SnSvcSetId
	}
	return 0
}

func (m *SessionInfo) GetSnId() uint64 {
	if m != nil && m.SnId != nil {
		return *m.SnId
	}
	return 0
}

func (m *SessionInfo) GetSnFlags() uint64 {
	if m != nil && m.SnFlags != nil {
		return *m.SnFlags
	}
	return 0
}

func (m *SessionInfo) GetSnAlgId() uint64 {
	if m != nil && m.SnAlgId != nil {
		return *m.SnAlgId
	}
	return 0
}

func (m *SessionInfo) GetSnRoutingPathType() uint64 {
	if m != nil && m.SnRoutingPathType != nil {
		return *m.SnRoutingPathType
	}
	return 0
}

func (m *SessionInfo) GetSnSessionTimeout() uint64 {
	if m != nil && m.SnSessionTimeout != nil {
		return *m.SnSessionTimeout
	}
	return 0
}

func (m *SessionInfo) GetSnState() uint64 {
	if m != nil && m.SnState != nil {
		return *m.SnState
	}
	return 0
}

func (m *SessionInfo) GetSnSwSessionId() uint64 {
	if m != nil && m.SnSwSessionId != nil {
		return *m.SnSwSessionId
	}
	return 0
}

func (m *SessionInfo) GetSnSvcId() uint64 {
	if m != nil && m.SnSvcId != nil {
		return *m.SnSvcId
	}
	return 0
}

func (m *SessionInfo) GetSnOffload() bool {
	if m != nil && m.SnOffload != nil {
		return *m.SnOffload
	}
	return false
}

// --------------------------
type FlowInfo struct {
	SrcAddr              *string  `protobuf:"bytes,1,opt,name=src_addr,json=srcAddr" json:"src_addr,omitempty"`
	DstAddr              *string  `protobuf:"bytes,2,opt,name=dst_addr,json=dstAddr" json:"dst_addr,omitempty"`
	FlowDirection        *uint32  `protobuf:"varint,3,opt,name=flow_direction,json=flowDirection" json:"flow_direction,omitempty"`
	SrcPort              *uint32  `protobuf:"varint,4,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort              *uint32  `protobuf:"varint,5,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	SrcIsV6              *bool    `protobuf:"varint,6,opt,name=src_is_v6,json=srcIsV6" json:"src_is_v6,omitempty"`
	DstIsV6              *bool    `protobuf:"varint,7,opt,name=dst_is_v6,json=dstIsV6" json:"dst_is_v6,omitempty"`
	FlowType             *uint32  `protobuf:"varint,8,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
	FlowFlags            *uint32  `protobuf:"varint,9,opt,name=flow_flags,json=flowFlags" json:"flow_flags,omitempty"`
	IpProto              *uint32  `protobuf:"varint,10,opt,name=ip_proto,json=ipProto" json:"ip_proto,omitempty"`
	IdleTimeout          *uint64  `protobuf:"varint,11,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	FlowPacketsIn        *uint64  `protobuf:"varint,12,opt,name=flow_packets_in,json=flowPacketsIn" json:"flow_packets_in,omitempty"`
	FlowPacketsOut       *uint64  `protobuf:"varint,13,opt,name=flow_packets_out,json=flowPacketsOut" json:"flow_packets_out,omitempty"`
	FlowBytesIn          *uint64  `protobuf:"varint,14,opt,name=flow_bytes_in,json=flowBytesIn" json:"flow_bytes_in,omitempty"`
	FlowBytesOut         *uint64  `protobuf:"varint,15,opt,name=flow_bytes_out,json=flowBytesOut" json:"flow_bytes_out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowInfo) Reset()         { *m = FlowInfo{} }
func (m *FlowInfo) String() string { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()    {}
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_telemetry_b56d271b9894e7d4, []int{2}
}
func (m *FlowInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowInfo.Unmarshal(m, b)
}
func (m *FlowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowInfo.Marshal(b, m, deterministic)
}
func (dst *FlowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowInfo.Merge(dst, src)
}
func (m *FlowInfo) XXX_Size() int {
	return xxx_messageInfo_FlowInfo.Size(m)
}
func (m *FlowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlowInfo proto.InternalMessageInfo

func (m *FlowInfo) GetSrcAddr() string {
	if m != nil && m.SrcAddr != nil {
		return *m.SrcAddr
	}
	return ""
}

func (m *FlowInfo) GetDstAddr() string {
	if m != nil && m.DstAddr != nil {
		return *m.DstAddr
	}
	return ""
}

func (m *FlowInfo) GetFlowDirection() uint32 {
	if m != nil && m.FlowDirection != nil {
		return *m.FlowDirection
	}
	return 0
}

func (m *FlowInfo) GetSrcPort() uint32 {
	if m != nil && m.SrcPort != nil {
		return *m.SrcPort
	}
	return 0
}

func (m *FlowInfo) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *FlowInfo) GetSrcIsV6() bool {
	if m != nil && m.SrcIsV6 != nil {
		return *m.SrcIsV6
	}
	return false
}

func (m *FlowInfo) GetDstIsV6() bool {
	if m != nil && m.DstIsV6 != nil {
		return *m.DstIsV6
	}
	return false
}

func (m *FlowInfo) GetFlowType() uint32 {
	if m != nil && m.FlowType != nil {
		return *m.FlowType
	}
	return 0
}

func (m *FlowInfo) GetFlowFlags() uint32 {
	if m != nil && m.FlowFlags != nil {
		return *m.FlowFlags
	}
	return 0
}

func (m *FlowInfo) GetIpProto() uint32 {
	if m != nil && m.IpProto != nil {
		return *m.IpProto
	}
	return 0
}

func (m *FlowInfo) GetIdleTimeout() uint64 {
	if m != nil && m.IdleTimeout != nil {
		return *m.IdleTimeout
	}
	return 0
}

func (m *FlowInfo) GetFlowPacketsIn() uint64 {
	if m != nil && m.FlowPacketsIn != nil {
		return *m.FlowPacketsIn
	}
	return 0
}

func (m *FlowInfo) GetFlowPacketsOut() uint64 {
	if m != nil && m.FlowPacketsOut != nil {
		return *m.FlowPacketsOut
	}
	return 0
}

func (m *FlowInfo) GetFlowBytesIn() uint64 {
	if m != nil && m.FlowBytesIn != nil {
		return *m.FlowBytesIn
	}
	return 0
}

func (m *FlowInfo) GetFlowBytesOut() uint64 {
	if m != nil && m.FlowBytesOut != nil {
		return *m.FlowBytesOut
	}
	return 0
}

var E_JnprScvsSessionExt = &proto.ExtensionDesc{
	ExtendedType:  (*telemetry_top.JuniperNetworksSensors)(nil),
	ExtensionType: (*ServicesSession)(nil),
	Field:         79,
	Name:          "jnprScvsSessionExt",
	Tag:           "bytes,79,opt,name=jnprScvsSessionExt",
	Filename:      "plugins/parsers/jtinative/session_telemetry/session_telemetry.proto",
}

func init() {
	proto.RegisterType((*ServicesSession)(nil), "ServicesSession")
	proto.RegisterType((*SessionInfo)(nil), "SessionInfo")
	proto.RegisterType((*FlowInfo)(nil), "FlowInfo")
	proto.RegisterExtension(E_JnprScvsSessionExt)
}

func init() {
	proto.RegisterFile("plugins/parsers/jtinative/session_telemetry/session_telemetry.proto", fileDescriptor_session_telemetry_b56d271b9894e7d4)
}

var fileDescriptor_session_telemetry_b56d271b9894e7d4 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x4d, 0x6f, 0x1a, 0x3b,
	0x14, 0x15, 0x01, 0x1e, 0x83, 0x81, 0x40, 0x9c, 0x27, 0xbd, 0x49, 0x9e, 0x22, 0x11, 0xf4, 0x3e,
	0x90, 0x1a, 0x81, 0x94, 0x45, 0x54, 0x75, 0xd5, 0xa4, 0x1f, 0xd2, 0xb4, 0x52, 0x40, 0x4c, 0x54,
	0xa9, 0x2b, 0x6b, 0x3a, 0x36, 0xc4, 0xc9, 0x60, 0x8f, 0x7c, 0xcd, 0x50, 0xb6, 0xfd, 0x4f, 0xfd,
	0x71, 0xdd, 0x55, 0xbe, 0x66, 0x28, 0x69, 0xbb, 0xc3, 0xe7, 0x9c, 0x7b, 0xee, 0x9d, 0x7b, 0x6c,
	0xc8, 0xab, 0x3c, 0x5b, 0x2d, 0xa4, 0x82, 0x71, 0x9e, 0x18, 0x10, 0x06, 0xc6, 0x0f, 0x56, 0xaa,
	0xc4, 0xca, 0x42, 0x8c, 0x41, 0x00, 0x48, 0xad, 0x98, 0x15, 0x99, 0x58, 0x0a, 0x6b, 0x36, 0xbf,
	0x22, 0xa3, 0xdc, 0x68, 0xab, 0x4f, 0x8f, 0x77, 0x00, 0xb3, 0x3a, 0xf7, 0xe0, 0xe0, 0x3d, 0xe9,
	0xc6, 0xc2, 0x14, 0x32, 0x15, 0x10, 0xfb, 0x3a, 0xfa, 0x9c, 0x1c, 0x41, 0x91, 0x02, 0x2b, 0x7d,
	0xa4, 0x9a, 0xeb, 0xb0, 0xd2, 0xaf, 0x0e, 0x5b, 0x97, 0xed, 0xd1, 0x56, 0x14, 0xa9, 0xb9, 0x9e,
	0x75, 0x9d, 0x6c, 0x0f, 0x18, 0x7c, 0xad, 0x92, 0xd6, 0xde, 0x99, 0x3e, 0x23, 0x6d, 0x50, 0x6c,
	0x9e, 0xe9, 0xf5, 0xbe, 0x49, 0x73, 0xf4, 0x36, 0xd3, 0x6b, 0x74, 0x20, 0xa0, 0xca, 0xdf, 0xf4,
	0x82, 0x74, 0x41, 0x31, 0x28, 0x52, 0x06, 0xc2, 0x32, 0x95, 0x2c, 0x45, 0x78, 0xd0, 0xaf, 0x0c,
	0x9b, 0x37, 0xf5, 0x2f, 0x2f, 0x0f, 0x82, 0xca, 0xac, 0x0d, 0x2a, 0x2e, 0xd2, 0x58, 0xd8, 0xdb,
	0x64, 0x29, 0xe8, 0x39, 0xe9, 0xec, 0xa9, 0x25, 0x0f, 0xab, 0xfd, 0xca, 0xb0, 0xe6, 0x0c, 0xbd,
	0x28, 0xe2, 0xf4, 0x98, 0xd4, 0x41, 0x39, 0xaa, 0x86, 0x54, 0x0d, 0x54, 0xc4, 0xe9, 0x09, 0x09,
	0x70, 0xa4, 0x64, 0x01, 0x61, 0x1d, 0xf1, 0x86, 0x9b, 0x21, 0x59, 0x00, 0x3d, 0x25, 0x4d, 0x50,
	0x2c, 0xc9, 0x16, 0xae, 0xe6, 0x8f, 0x92, 0xbb, 0xce, 0x16, 0x11, 0xa7, 0x63, 0xf2, 0x27, 0x28,
	0x66, 0xf4, 0xca, 0x4a, 0xb5, 0x60, 0x79, 0x62, 0xef, 0x99, 0xdd, 0xe4, 0x22, 0x6c, 0xa0, 0xec,
	0x08, 0xd4, 0xcc, 0x53, 0xd3, 0xc4, 0xde, 0xdf, 0x6d, 0x72, 0x41, 0x2f, 0x08, 0x75, 0xf3, 0x95,
	0x51, 0xc8, 0xa5, 0xd0, 0x2b, 0x1b, 0x06, 0x28, 0xef, 0x81, 0xda, 0x6e, 0xe9, 0xce, 0xe3, 0xdb,
	0xa9, 0xc0, 0x26, 0x56, 0x84, 0xcd, 0xb2, 0x73, 0xec, 0x8e, 0xf4, 0x7f, 0xd2, 0x73, 0xd4, 0xfa,
	0x47, 0x1c, 0x3c, 0x24, 0x28, 0xe9, 0x80, 0x8a, 0xd7, 0xe5, 0xba, 0xf9, 0x76, 0x7c, 0xb7, 0x11,
	0xc9, 0xc3, 0xd6, 0xce, 0xa4, 0x48, 0x23, 0x4e, 0xcf, 0x08, 0x01, 0xc5, 0xf4, 0x7c, 0x9e, 0xe9,
	0x84, 0x87, 0xed, 0x7e, 0x65, 0x18, 0xcc, 0x9a, 0xa0, 0x26, 0x1e, 0x18, 0x7c, 0xab, 0x92, 0x60,
	0x97, 0x43, 0x9f, 0x04, 0x60, 0x52, 0x96, 0x70, 0x6e, 0xc2, 0xca, 0x7e, 0x00, 0x0d, 0x30, 0xe9,
	0x35, 0xe7, 0xc6, 0x29, 0x38, 0x58, 0xaf, 0x78, 0x12, 0x51, 0x83, 0x83, 0x45, 0xc5, 0xbf, 0xe4,
	0x10, 0x53, 0xe7, 0xd2, 0x88, 0xd4, 0x4a, 0xad, 0x30, 0x9e, 0xce, 0xac, 0xe3, 0xd0, 0xd7, 0x25,
	0x88, 0x9f, 0x6d, 0x52, 0x96, 0x6b, 0x63, 0x31, 0xa4, 0x0e, 0xf6, 0x98, 0x6a, 0x83, 0x1b, 0x71,
	0x3d, 0x90, 0xaa, 0x7b, 0x8a, 0x83, 0x45, 0xca, 0x7d, 0xa8, 0x49, 0x99, 0x04, 0x56, 0x5c, 0x61,
	0x4e, 0x01, 0x96, 0x45, 0xf0, 0xe1, 0xca, 0x71, 0xae, 0xcc, 0x73, 0x0d, 0xcf, 0x71, 0xb0, 0xc8,
	0xfd, 0x4d, 0x9a, 0x38, 0x14, 0x06, 0x17, 0xa0, 0x67, 0xe0, 0x00, 0xcc, 0xeb, 0x8c, 0x10, 0x24,
	0xfd, 0xcd, 0x68, 0x22, 0x8b, 0x72, 0x7f, 0x37, 0x4e, 0x48, 0x20, 0x73, 0x86, 0x4f, 0x06, 0xb7,
	0xdf, 0x99, 0x35, 0x64, 0x3e, 0x75, 0x47, 0x7a, 0x4e, 0xda, 0x92, 0x67, 0x62, 0x97, 0xb1, 0x5f,
	0x7d, 0xcb, 0x61, 0x65, 0xbc, 0xff, 0x91, 0x2e, 0x9a, 0xe7, 0x49, 0xfa, 0x28, 0x2c, 0x30, 0xa9,
	0x30, 0x83, 0x9a, 0xdf, 0xc7, 0xd4, 0xa3, 0x91, 0xa2, 0x43, 0xd2, 0x7b, 0xa2, 0x73, 0x76, 0x1d,
	0x14, 0x1e, 0xee, 0x09, 0x27, 0x2b, 0x4b, 0x07, 0x04, 0x4b, 0xd9, 0xa7, 0x8d, 0x15, 0xe8, 0x77,
	0xe8, 0xbb, 0x3a, 0xf0, 0xc6, 0x61, 0x91, 0xa2, 0xff, 0x6c, 0x43, 0xf0, 0x1a, 0xe7, 0xd5, 0x45,
	0x51, 0x7b, 0x27, 0x9a, 0xac, 0xec, 0x8b, 0x8f, 0x84, 0x3e, 0xa8, 0xdc, 0xc4, 0x69, 0x51, 0x3e,
	0xe5, 0x37, 0x9f, 0x2d, 0xfd, 0x6b, 0xf4, 0x6e, 0xa5, 0x64, 0x2e, 0xcc, 0xad, 0xb0, 0x6b, 0x6d,
	0x1e, 0x21, 0x16, 0x0a, 0xb4, 0x81, 0x70, 0xd2, 0xaf, 0x0c, 0x5b, 0x97, 0xbd, 0xd1, 0x4f, 0x7f,
	0x1a, 0xb3, 0xdf, 0x98, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xb7, 0x4d, 0x16, 0xb6, 0x04,
	0x00, 0x00,
}
